       	       	     +-------------------------+
		     |		CS 140	       |
		     | PROJECT 4: FILE SYSTEMS |
		     |	   DESIGN DOCUMENT     |
		     +-------------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

Yuzhou Liu          <yuzhoul@stanford.edu>
Haran Chidambaram   <haranpc@stanford.edu>
Jayadev Velagandula <jayadevv@stanford.edu>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

		     INDEXED AND EXTENSIBLE FILES
		     ============================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

struct inode_disk
  {
    off_t length;                           /* File size in bytes. */
    unsigned magic;                         /* Magic number. */
    uint32_t unused[109];                   /* Not used. */
    block_sector_t indirect_block;          /* Sector number of the indirect block */
    block_sector_t dbl_indirect_block;      /* Sector number of the double indirect block */
    block_sector_t direct_blocks[NUM_DIRECT_BLOCKS];  /* Array for storing the pointers in inode */
    uint32_t type;                          /* type either dir or file type
    block_sector_t parent_sector_number;    /* Sector number of parent directory */
    uint32_t num_of_valid_entries; // includes files and subdirectories
  };

// Following struct represents an indirect block
// that stores BLOCK_ENTRY_NUM number of sector numbers
struct indirect_block
  {
    block_sector_t blocks[BLOCK_ENTRY_NUM];
  };


>> A2: What is the maximum size of a file supported by your inode
>> structure?  Show your work.

We have 12 direct blocks, 1 indirect block and 1 double indirect block.

12 * 512 + 1 * 128 * 512 + 1 * 128 * 128 * 512 = 8MB

---- SYNCHRONIZATION ----

>> A3: Explain how your code avoids a race if two processes attempt to
>> extend a file at the same time.

We use a inode_lock that in the case of having to extend a file in inode_write_at
function, the lock is acquired before the inode_grow function is called. The inode
under growing is exclusively accessed by the current process until growing is done
and the change in inod_disk is written to the buffer cache.

>> A4: Suppose processes A and B both have file F open, both
>> positioned at end-of-file.  If A reads and B writes F at the same
>> time, A may read all, part, or none of what B writes.  However, A
>> may not read data other than what B writes, e.g. if B writes
>> nonzero data, A is not allowed to see all zeros.  Explain how your
>> code avoids this race.

We use a inode_lock that is a memeber of the in memory inode struct.
The lock is acquired in case of a inode_grow is needed in write. The lock is held
until the grow is finished and updated inode_disk is persisted to buffer cache.
The corresponding reader will try to acquire the lock in the byte_to_sector function
where the byte offset of the file represented by the inode is translated to disk sector
number. In the byte_to_sector function, the inode_disk struct is retrieved from
the buffer cache as the inode struct has the sector number to its corresponding
inode_disk. Since lock is scquired and released around the cache read operation
to get the inode_disk, the inode_disk struct read from cache is going to either have
an already extended and written sector by the writer, or the extend and writing has not
happened yet. Thus avoiding the above mentioned race condition.

>> A5: Explain how your synchronization design provides "fairness".
>> File access is "fair" if readers cannot indefinitely block writers
>> or vice versa.  That is, many processes reading from a file cannot
>> prevent forever another process from writing the file, and many
>> processes writing to a file cannot prevent another process forever
>> from reading the file.

The inode lock we have for each inode is only acquired by the writer when a file is
extended or in other words, inode_grow is needed. It does not lock the inode and provide
exclusive access to one thread in any write. On the other hand, the reader only acquire lock
when the byte_to_sector translation happens and the locking only locks a buffer cache read
to retrieve the corresponding inode_disk from the cache. Therefore the period of locking is
very short and bounded which eliminates starvation.

---- RATIONALE ----

>> A6: Is your inode structure a multilevel index?  If so, why did you
>> choose this particular combination of direct, indirect, and doubly
>> indirect blocks?  If not, why did you choose an alternative inode
>> structure, and what advantages and disadvantages does your
>> structure have, compared to a multilevel index?

			    SUBDIRECTORIES
			    ==============

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

---- ALGORITHMS ----

>> B2: Describe your code for traversing a user-specified path.  How
>> do traversals of absolute and relative paths differ?

---- SYNCHRONIZATION ----

>> B4: How do you prevent races on directory entries?  For example,
>> only one of two simultaneous attempts to remove a single file
>> should succeed, as should only one of two simultaneous attempts to
>> create a file with the same name, and so on.

>> B5: Does your implementation allow a directory to be removed if it
>> is open by a process or if it is in use as a process's current
>> working directory?  If so, what happens to that process's future
>> file system operations?  If not, how do you prevent it?

---- RATIONALE ----

>> B6: Explain why you chose to represent the current directory of a
>> process the way you did.

			     BUFFER CACHE
			     ============

---- DATA STRUCTURES ----

>> C1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

---- ALGORITHMS ----

>> C2: Describe how your cache replacement algorithm chooses a cache
>> block to evict.

>> C3: Describe your implementation of write-behind.

>> C4: Describe your implementation of read-ahead.

---- SYNCHRONIZATION ----

>> C5: When one process is actively reading or writing data in a
>> buffer cache block, how are other processes prevented from evicting
>> that block?

>> C6: During the eviction of a block from the cache, how are other
>> processes prevented from attempting to access the block?

---- RATIONALE ----

>> C7: Describe a file workload likely to benefit from buffer caching,
>> and workloads likely to benefit from read-ahead and write-behind.

			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students in future quarters?

>> Any other comments?
