       	       	    +---------------------------+
		    |		CS 140		|
		    | PROJECT 3: VIRTUAL MEMORY	|
		    |	   DESIGN DOCUMENT	|
		    +---------------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

Yuzhou Liu          <yuzhoul@stanford.edu>
Haran Chidambaram   <haranpc@stanford.edu>
Jayadev Velagandula <jayadevv@stanford.edu>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

			PAGE TABLE MANAGEMENT
			=====================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

The following members are added to the struc thread:

uint32_t *pagedir;                    /* Page directory. */
void* code_seg_start;                 /* Start vaddr of code_segment*/
void* code_seg_end;                   /* End vaddr of code_segment*/
void* data_seg_start;                 /* Start vaddr of data_segment*/
void* data_seg_end;                   /* End vaddr of data_segment*/
void* stack_start;                    /* Start vaddr of stack_segment*/
void* stack_end;                      /* End vaddr of stack_segment*/
int total_mmaps;                      /* Total mmaps opened by current process */
struct list mmap_list;                /* List of opened mmaps */
struct hash spage_table;              /* Per process suplimental page table */


A new header file page.h is added and contains the following new struct:

struct spage_table_entry
  {
    struct file *file;      /* File pointer to spte associated with a file */
    uint32_t read_bytes;    /* Number of actual bytes to read from file for spte associated with a file */
    uint32_t zero_bytes;    /* Number of zero bytes to fill page for spte associated with a file */
    off_t offset;           /* Offset from file for spte associated with a file */
    uint8_t type;           /* type can be modified by other threads during eviction. Read or write of this should have pinned=true */
    uint32_t swap_idx;      /* swap index which corresponds to swap sector for spte associated with swap */
    void* uvaddr;           /* user virtual address corresponding to this spte */
    bool writable;          /* Indicates if user page is writable or not */
    bool pinned;            /* Indicates if the user page is pinned or not */
    struct lock entry_lock; /* lock corresponding to this spte */
    struct hash_elem elem;  /* hash elem to add to spte hash */
  };

The above struct describes an entry in supplementary page table which is a hash in the thread struct.

A new header file frame.h is added and contains the following new struct definitions:


struct list frame_table;       /* Frame table which is a list of frames in use */
struct list_elem *clock_hand;  /* Clock hand which points to an element in frame_table list */

struct frame_table_entry
  {
    struct spage_table_entry *spte; /* spte of user virtual address which the frame corresponds to currently */
    struct list_elem elem;          /* list element to add to frame_table list */
    struct thread *thread;          /* thread of user virtual address which the frame corresponds to currently */
    void* kvaddr;                   /* kernel virtual address of this frame */
  };

The data structures in frame.h is for the frame table.


---- ALGORITHMS ----

>> A2: In a few paragraphs, describe your code for locating the frame,
>> if any, that contains the data of a given page.

With a given page, the supplementary page table entry is first located using the following function defined
in page.h:

struct spage_table_entry*
page_get_spte(void* fault_addr)

The function takes in a virtual address and it is rounded down to the page starting address. The starting
virtual address of the page is used as the key of the supplementary page table in the thread struct to
locate the supplementary page table entry (spte).

The pointer to the spte is then passed to the following function defined in frame.h:

void *
frame_get_kpage(struct spage_table_entry *spte)

The frame table is a list of frame_table_entry. In the frame_table_entry struct there is a pointer to
the spte the physical page is for. The above function thus take the spte passed in and walk through the
frame table to find the frame_table_entry that correspond to the spte.

The frame_table_entry contains the kernel virtual address of this frame, which is returned by the function.


>> A3: How does your code coordinate accessed and dirty bits between
>> kernel and user virtual addresses that alias a single frame, or
>> alternatively how do you avoid the issue?

We were able to avoid this problem entirely by only accessing the frame using user virtual address instead
of kernel virtual address.

---- SYNCHRONIZATION ----

>> A4: When two user processes both need a new frame at the same time,
>> how are races avoided?

The frame table has a global lock that needs to be required when the frame_table list is
being accessed.

---- RATIONALE ----

>> A5: Why did you choose the data structure(s) that you did for
>> representing virtual-to-physical mappings?

We used a hash as the supplementary page table per thread struct. The reason we use a hash
is because each hash_entry in that hash represents a virtual page. Naturally the user virtual
address can be used as the key to the hash as they are unique within the user process. This
provides fast access from the hash as looking up spte in the table is a frequently accuring action.

We used a list to represent frame table. The frame table entry is a list element that represents
a physical page. The frame table is a small subset of the virtual memory space so using a list
avoided some of the overhead in the hash implementation.

		       PAGING TO AND FROM DISK
		       =======================

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

struct block *swap_block;    /* Pointer to struct block representing swap space */
struct bitmap *swap_bitmap;  /* Bitmap which holds bits = block_size (swap_block)/bitmap_to_sector,
                                where bitmap_to_sector=PGSIZE/BLOCK_SECTOR_SIZE */
uint32_t bitmap_to_sector;   /* This gives number of swap index needed to make a page */
struct lock swap_lock;       /* Lock when using swap_block */

---- ALGORITHMS ----

>> B2: When a frame is required but none is free, some frame must be
>> evicted.  Describe your code for choosing a frame to evict.

We maintain a frame_table which is a list of frames in use. Everytime we try to find a frame,
we call palloc_get_page(PAL_USER) and add it to frame_table. Only when palloc fails, eviction kicks in.

We maintain a clock_hand pointer which points to an element in frame_table. On initialization, clock_hand is NULL.
Everytime we insert a frame from palloc, we insert it next to current clock_hand and move the clock_hand to point to inserted element.
Eg: Trying to insert [F1] to [H]->[F0]->[T], clock_hand = [F0]
    After insertion:         [H]->[F0]->[F1]->[T], clock_hand = [F1]

When we release a user virtual address and if a frame is servicing it, we return the frame to user_pool.
If clock_hand points to the frame to remove, move clock_hand to previous element/frame.
Eg:  If clock_hand == the element to remove
     [H]->[F0]->[F1]->[F2]->[T] , clock_hand = [F1] ---(point to next)---> clock_hand = [F0]
     [H]->[F0]->[F1]->[F2]->[T] , clock_hand = [F0] ---(wrap around)---> clock_hand = [F2]

Coming to the actual frame choosen during eviction, we start from element to next of clock_hand(From the insertion example above, we
would start from [F0] thus implementing LRU) and go through the list in forward direction similar to "clocking".
If we find a frame which was accessed, we mark it as unaccessed for potentially picking it during 2nd run. If we find a
unaccessed and unpinned frame, we pick it for eviction. Picked frame, if dirty, will write to swap slot or file.

>> B3: When a process P obtains a frame that was previously used by a
>> process Q, how do you adjust the page table (and any other data
>> structures) to reflect the frame Q no longer has?

When we choose a frame to evict, the frame table entry has pointer to supplementry page_table entry and thread pointer of user virtual address associated with Q.
We use pagedir_clear_page() to clear Q's user vaddr from page tables. Then we update the frame table entry to point to spte of P's user vaddr and update the thread pointer to that of P. By doing this, we have no frames associated with Q's evicted user vaddr and access to Q's evicted user vaddr would cause a page fault.


>> B4: Explain your heuristic for deciding whether a page fault for an
>> invalid virtual address should cause the stack to be extended into
>> the page that faulted.

When a page fault happens, we first attempt to look up in the supplementary page table and try to find
the supplementary page table entry (spte) that corresponds to this faulting virtual address.
The other part of the design guarantees that a spte exists in the supplementary page table if the faulting
access is either of the following cases:

1. spte was setup for lazy loading from file.
2. spte was setup for lazy loading from mmap file.
3. The physical page is located on Swap space.
4. spte was setup when previously faulted and grow_stack function was called.

Note in case 4, grow_stack only setups physical page for the page that corresponds to the faulting virtual
address, all other pages between the faulting virtual address and previous stack_start we only setup the spte
to enable lazy loading when next time it faults on a virtual address within those pages.

If the above steps failed to locate the spte, that means it is either invalid address or it is PUSH or PUSHA.

The grow_stack function is only called when the faulting address is valid user virtual address, and the
fault address is within the limit below the stack pointer as specified by the project document.


---- SYNCHRONIZATION ----

>> B5: Explain the basics of your VM synchronization design.  In
>> particular, explain how it prevents deadlock.  (Refer to the
>> textbook for an explanation of the necessary conditions for
>> deadlock.)

Synchronization is done with the following locks.
[1] A frame_table lock(Coarse lock).
[2] One lock per supplementry page table entry (Fine lock).
[3] Swap lock.(Coarse lock).
[4] File lock.(Coarse lock).

We prevent deadlock by ordering lock resources.
[1] When a thread has to obtain multiple locks,
     - frame_table lock would be the first acquired.
     - supplemetry table entry lock would be the next to be acquired.
     - filesys_lock and swap_lock cannot be held at the same time and they are the last to be acquired.

This ordering of locks prevents deadlock.

>> B6: A page fault in process P can cause another process Q's frame
>> to be evicted.  How do you ensure that Q cannot access or modify
>> the page during the eviction process?  How do you avoid a race
>> between P evicting Q's frame and Q faulting the page back in?

For any access/update to frame_table or for calling palloc_get_page(PAL_USER) on a page_fault, frame_table lock has to be obtained.
So when P is in the process of eviting Q's frame, it would be holding the frame_table lock.
When the eviction logic picks Q's frame, it would first clear the page table entry corresponding to Q's user vaddr.
So if Q tries access or modify the page, it would page_fault. When Q page_faults it would try to acquire frame_table lock first.
But the lock cannot be obtained till P's page fault is serviced completly. So when Q faults the page back in,
P would have gotten its page fault serviced completly thus preventing races.

>> B7: Suppose a page fault in process P causes a page to be read from
>> the file system or swap.  How do you ensure that a second process Q
>> cannot interfere by e.g. attempting to evict the frame while it is
>> still being read in?

Whenever Process P's user vaddr page faults, we first pin the user vaddr. The pinned/unpinned information is
stored in supplementry page table. The user vaddr is unpinned only after it gets a frame and required data is
read from file/swap or zeroed. So second process Q cannot interfere because whenever it tries to evict the frame which
was assigned to P, it would read from spte(frame has pointer to spte it is currently assigned to) that the user vaddr
 is pinned. So the frame cannot be evicted.

>> B8: Explain how you handle access to paged-out pages that occur
>> during system calls.  Do you use page faults to bring in pages (as
>> in user programs), or do you have a mechanism for "locking" frames
>> into physical memory, or do you use some other design?  How do you
>> gracefully handle attempted accesses to invalid virtual addresses?

In the syscalls we implement, the user vaddr of concern are the following
[1] command_line in SYS_EXEC.
[2] file_name in SYS_CREATE, SYS_REMOVE and SYS_OPEN.
[3] buffer in SYS_READ and SYS_WRITE.

We dont want them to page_fault inside filesys operations because the thread would acquire filesys_lock and
pagefault inside would cause deadlock because page_fault logic could cause read/write to file which needs the lock
aswel and cause deadlock.

To avoid this, inside syscall_handler(), right before calling the separate syscalls mentioned above,
[1] We pin the user vaddr mentioned above.
[2] If the user vaddrs have no page table entry, gracefully allocate frames to these user pages and create an entry in page table.
By pinning the user vaddr, we prevent the pages form getting evicted from the time we brought the frame and
the time we access it after holding filesys_lock.
After we come out of the syscall functions, we unpin the user vaddrs.

---- RATIONALE ----

>> B9: A single lock for the whole VM system would make
>> synchronization easy, but limit parallelism.  On the other hand,
>> using many locks complicates synchronization and raises the
>> possibility for deadlock but allows for high parallelism.  Explain
>> where your design falls along this continuum and why you chose to
>> design it this way.

The three high level locks in VM systems are frame_table lock, swap_lock and supplementry page table entry lock.
They are for the entrire frame_table, swap space and per supplementry page table entry respectively.

The reason for choosing a single frame_table lock than going for lock every frame_table
entry is because our frame_table structure has a list and clock_hand pointer which are common
to all processes. So multiple locks for frame_table will be complicated.

Also introducing a swap_lock helps us parallelise read from swap_slot and frame allocation/eviction process.
So when a frame is reading from swap slot another page_fault could be serviced(As mentioned above the frame can't
be evicetd because of pinning).

Supplementry page table entry has variables named pinned, page type(whether it from file/swap) etc.
Lets take a process P which has a supplementry page table entry for a user vaddr. The above variables of the supplementry
page table entry can be updated by process P and it can be read by other Processes during eviction(We need to know if a frame
is pinned or not). By creating separate locks per entry, reading and writing of different entries are parallel.

By these 3 high level locks we create parallelism but we don't overdo it and complicate our design.


			 MEMORY MAPPED FILES
			 ===================

---- DATA STRUCTURES ----

>> C1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

/* Struct which stores relevant mmap info */
struct mmap_info
  {
    mapid_t mapid;               /* mapid of the mmap */
    struct file *file_ptr;       /* pointer to the file mmaped */
    void* vaddr_start;           /* Start virtual address of mmap */
    void* vaddr_end;             /* End virtual address of mmap */
    size_t mmap_size;            /* size of file mmaped */
    struct list_elem mmap_elem;  /* List element for mmap_list list. */

  };

Following members are added to thread struct
int total_mmaps;                      /* Total mmaps opened by current process */
struct list mmap_list;                /* List of opened mmaps */

---- ALGORITHMS ----

>> C2: Describe how memory mapped files integrate into your virtual
>> memory subsystem.  Explain how the page fault and eviction
>> processes differ between swap pages and other pages.

Whenever syscall to mmap a file is called, after checks to validate the address range, we create a mmap_info object
and add it to the thread's mmap_list. The mmap_info created is updated with file_pointer(obtained from file_reopen),
user virtual address start and end and file_size. And for each page in the mmap range, we create a supplementry page
table entry. We update the supplementry page_table entry(spte) with file_ptr, offset, bytes to read and mark it as MMAP type.

For page_faults on mmaped page(spte corresponding to the vaddr will indicate that it is a mmaped page),
we always get data from the mapped file at particular offset. But for other type of pages, the data could be either be from
file or from swap slot. mmaped page never gets data from swap slot.

While evicting mmaped page, if the page is dirty, we write back to the file it maps at particular offset but other pages
write to swap slot and need to keep track of swap slot.

>> C3: Explain how you determine whether a new file mapping overlaps
>> any existing segment.

During load_segement() in start_process(), we store code segment's start and end virtual addresses.
Similarly we store the data segment's start and end virtual addresses. These are stored as part of struct thread
corresponding to the process. We similary store stack's address which gets updated whenver we grow stack.

When we try to map a new file we make sure that the user virtual address range(obtained from the start virtual address provided
to syscall and size of file to map) is not overlapping with any of the segments which are available in struct thread.

---- RATIONALE ----

>> C4: Mappings created with "mmap" have similar semantics to those of
>> data demand-paged from executables, except that "mmap" mappings are
>> written back to their original files, not to swap.  This implies
>> that much of their implementation can be shared.  Explain why your
>> implementation either does or does not share much of the code for
>> the two situations.

Our implementation shares the code for data demand-paged from executable and "mmap" mappings
with few differences.

Similarity:
- Both the types of pages store the file pointer, offset, bytes to read.
- Page fault on both pages are treated similarly with same code. Unless the demand-paged from executable was to a R/W segment
  and it was already evicted to swap slot.
  We shared code in case mentioned above because both page faults can be serviced by read from a file from a particular
  offset which is stored in both the type of pages.

Differences:
- During eviction, dirty pages from executable are stored in swap while dirty mmaped pages write back to the file.
  We did not want to evict mmaped pages to swap and write back to file at the end as we did not want to waste a swap slot.
  Also any processes sharing the file will get a chance to look at updated values.
- During process exit, dirty pages from executable are NOT stored anywhere while dirty mmaped pages write back to the file.
  Dirty pages from executable have changes which lose their scope at the end of process execution. So they need not be backed
  up anywhere. But mmaped pages have to write back to the file as the file's scope continues.

			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?
